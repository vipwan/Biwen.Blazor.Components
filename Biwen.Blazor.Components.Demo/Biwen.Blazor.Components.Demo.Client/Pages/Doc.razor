@rendermode InteractiveAuto

@page "/doc"
@using Microsoft.FluentUI.AspNetCore.Components.Utilities

<PageTitle>帮助文档</PageTitle>

<div>
    <FluentAccordion ExpandMode="AccordionExpandMode.Single">

        <FluentAccordionItem Heading="QRCode" Expanded="true">
            <h5 class="@cls">二维码生成</h5>
            <QRCode Content="hello biwen" Level="@QRCodeLevel.H" TypeNumber="4" CellSize="5"></QRCode>
        </FluentAccordionItem>


        <FluentAccordionItem Heading="CodeHighlighter" Expanded="true">
            <h5 class="@cls">代码高亮组件</h5>
            <MarkdownViewer FromAsset="/md/CodeHighlighter.md"></MarkdownViewer>
        </FluentAccordionItem>


        <FluentAccordionItem Heading="MarkdownViewer">
            <h5 class="@cls">Markdown展示组件</h5>
            <MarkdownViewer CodeHighlightRowNumber="false" FromAsset="/md/MarkdownViewer.md"></MarkdownViewer>
        </FluentAccordionItem>


        <FluentAccordionItem Heading="MarkdownEditor">
            <h5 class="@cls">Markdown编辑器</h5>
            <MarkdownViewer CodeHighlightRowNumber="true" FromAsset="/md/MarkdownEditor.md"></MarkdownViewer>
        </FluentAccordionItem>


        <FluentAccordionItem Heading="使用Content">
            <h5 class="@cls">使用Content</h5>
            @* <MarkdownViewer Content="@md"></MarkdownViewer> *@

            <DynamicComponent Type="@typeof(MarkdownViewer)"
                              Parameters="@(new Dictionary<string,object>(){{ "Content" , md } })"></DynamicComponent>

        </FluentAccordionItem>
    </FluentAccordion>

</div>

@code {

    string md = $@"
* Biwen.Blazor.Components
* Biwen.Blazor.Components.Demo
* Biwen.Blazor.Components.Demo.Client
* Biwen.Blazor.Components.Demo.Server
* Biwen.Blazor.Components.Demo.Shared
";

    string? cls => new CssBuilder().AddClass("color").Build();
}